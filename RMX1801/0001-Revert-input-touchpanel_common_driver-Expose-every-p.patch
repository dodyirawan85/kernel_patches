From 0c18254d2da88688f390a97c4a47fa6e2f66b40d Mon Sep 17 00:00:00 2001
From: dodyirawan85 <40514988+dodyirawan85@users.noreply.github.com>
Date: Sun, 3 Jan 2021 08:56:21 +0000
Subject: [PATCH 1/2] Revert "input: touchpanel_common_driver: Expose every
 possible gesture"

This reverts commit bf10ac3d62ac9b4fbcc0e169ceb3c8a75133e531.
---
 .../oppo_touchscreen/touchpanel_common.h      |  15 --
 .../touchpanel_common_driver.c                | 234 ++++++------------
 2 files changed, 78 insertions(+), 171 deletions(-)

diff --git a/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common.h b/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common.h
index c0cccc5a2b1a..238d3281c259 100755
--- a/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common.h
+++ b/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common.h
@@ -59,21 +59,6 @@
 #define Down2UpSwip         11  // |^
 #define Mgestrue            12  // M
 #define Wgestrue            13  // W
-
-#define KEY_GESTURE_W               246
-#define KEY_GESTURE_M               247
-#define KEY_DOUBLE_TAP              KEY_WAKEUP
-#define KEY_GESTURE_CIRCLE          249
-#define KEY_GESTURE_TWO_SWIPE       250
-#define KEY_GESTURE_UP_ARROW        251
-#define KEY_GESTURE_DOWN_ARROW      252
-#define KEY_GESTURE_LEFT_ARROW      253
-#define KEY_GESTURE_RIGHT_ARROW     254
-#define KEY_GESTURE_SWIPE_UP        KEY_F5
-#define KEY_GESTURE_SWIPE_DOWN      KEY_F6
-#define KEY_GESTURE_SWIPE_LEFT      KEY_F7
-#define KEY_GESTURE_SWIPE_RIGHT     KEY_F8
-#define KEY_GESTURE_SINGLE_TAP      KEY_F9
 #define FingerprintDown     14
 #define FingerprintUp       15
 
diff --git a/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common_driver.c b/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common_driver.c
index 5c46cb1b2568..d435e181dff2 100755
--- a/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common_driver.c
+++ b/drivers/input/touchscreen/oppo_touchscreen/touchpanel_common_driver.c
@@ -84,20 +84,6 @@ static int pm_qos_state = 0;
 #define PM_QOS_TOUCH_WAKEUP_VALUE 400
 #endif
 
-uint8_t DouTap_enable = 0;				 // double tap
-uint8_t UpVee_enable  = 0;               // V
-uint8_t DownVee_enable  = 0;             // ^
-uint8_t LeftVee_enable = 0;              // >
-uint8_t RightVee_enable = 0;             // <
-uint8_t Circle_enable = 0;               // O
-uint8_t DouSwip_enable = 0;              // ||
-uint8_t Left2RightSwip_enable = 0;       // -->
-uint8_t Right2LeftSwip_enable = 0;       // <--
-uint8_t Up2DownSwip_enable = 0;          // |v
-uint8_t Down2UpSwip_enable = 0;          // |^
-uint8_t Mgestrue_enable = 0;             // M
-uint8_t Wgestrue_enable = 0;             // W
-
 /*******Part2:declear Area********************************/
 static void speedup_resume(struct work_struct *work);
 static void lcd_trigger_load_tp_fw(struct work_struct *work);
@@ -350,8 +336,6 @@ static void tp_geture_info_transform(struct gesture_info * gesture, struct resol
 static void tp_gesture_handle(struct touchpanel_data *ts)
 {
     struct gesture_info gesture_info_temp;
-    bool enabled = false;
-    int key = -1;
 
     if (!ts->ts_ops->get_gesture_info) {
         TPD_INFO("not support ts->ts_ops->get_gesture_info callback\n");
@@ -377,62 +361,6 @@ static void tp_gesture_handle(struct touchpanel_data *ts)
             gesture_info_temp.gesture_type == Wgestrue ? "(W)" :
             gesture_info_temp.gesture_type == FingerprintDown ? "(fingerprintdown)" :
             gesture_info_temp.gesture_type == FingerprintUp ? "(fingerprintup)" : "unknown");
-
-	switch (gesture_info_temp.gesture_type) {
-		case DouTap:
-			enabled = DouTap_enable;
-			key = KEY_DOUBLE_TAP;
-			break;
-		case UpVee:
-			enabled = UpVee_enable;
-			key = KEY_GESTURE_DOWN_ARROW;
-			break;
-		case DownVee:
-			enabled = DownVee_enable;
-			key = KEY_GESTURE_UP_ARROW;
-			break;
-		case LeftVee:
-			enabled = LeftVee_enable;
-			key = KEY_GESTURE_RIGHT_ARROW;
-			break;
-		case RightVee:
-			enabled = RightVee_enable;
-			key = KEY_GESTURE_LEFT_ARROW;
-			break;
-		case Circle:
-			enabled = Circle_enable;
-			key = KEY_GESTURE_CIRCLE;
-			break;
-		case DouSwip:
-			enabled = DouSwip_enable;
-			key = KEY_GESTURE_TWO_SWIPE;
-			break;
-		case Left2RightSwip:
-			enabled = Left2RightSwip_enable;
-			key = KEY_GESTURE_SWIPE_RIGHT;
-			break;
-		case Right2LeftSwip:
-			enabled = Right2LeftSwip_enable;
-			key = KEY_GESTURE_SWIPE_LEFT;
-			break;
-		case Up2DownSwip:
-			enabled = Up2DownSwip_enable;
-			key = KEY_GESTURE_SWIPE_DOWN;
-			break;
-		case Down2UpSwip:
-			enabled = Down2UpSwip_enable;
-			key = KEY_GESTURE_SWIPE_UP;
-			break;
-		case Mgestrue:
-			enabled = Mgestrue_enable;
-			key = KEY_GESTURE_M;
-			break;
-		case Wgestrue:
-			enabled = Wgestrue_enable;
-			key = KEY_GESTURE_W;
-			break;
-	}
-
     #if GESTURE_COORD_GET
     if (ts->ts_ops->get_gesture_coord) {
         ts->ts_ops->get_gesture_coord(ts->chip_data, gesture_info_temp.gesture_type);
@@ -445,12 +373,10 @@ static void tp_gesture_handle(struct touchpanel_data *ts)
         if(ts->geature_ignore)
             return;
         #endif
-	if (enabled) {
-            input_report_key(ts->input_dev, key, 1);
-            input_sync(ts->input_dev);
-            input_report_key(ts->input_dev, key, 0);
-            input_sync(ts->input_dev);
-        }
+        input_report_key(ts->input_dev, KEY_WAKEUP, 1);
+        input_sync(ts->input_dev);
+        input_report_key(ts->input_dev, KEY_WAKEUP, 0);
+        input_sync(ts->input_dev);
     } else if (gesture_info_temp.gesture_type == FingerprintDown) {
         ts->fp_info.touch_state = 1;
         opticalfp_irq_handler(&ts->fp_info);
@@ -1391,6 +1317,67 @@ void switch_headset_state(int headset_state)
 }
 EXPORT_SYMBOL(switch_headset_state);
 
+/*
+ *    gesture_enable = 0 : disable gesture
+ *    gesture_enable = 1 : enable gesture when ps is far away
+ *    gesture_enable = 2 : disable gesture when ps is near
+ */
+static ssize_t proc_gesture_control_write(struct file *file, const char __user *buffer, size_t count, loff_t *ppos)
+{
+    int value = 0;
+    char buf[4] = {0};
+    struct touchpanel_data *ts = PDE_DATA(file_inode(file));
+
+    if (count > 2)
+        return count;
+    if (!ts)
+        return count;
+
+    if (copy_from_user(buf, buffer, count)) {
+        TPD_INFO("%s: read proc input error.\n", __func__);
+        return count;
+    }
+    sscanf(buf, "%d", &value);
+    if (value > 2 || (ts->gesture_test_support && ts->gesture_test.flag))
+        return count;
+
+    mutex_lock(&ts->mutex);
+    if (ts->gesture_enable != value) {
+        ts->gesture_enable = value;
+        TPD_INFO("%s: gesture_enable = %d, is_suspended = %d\n", __func__, ts->gesture_enable, ts->is_suspended);
+        if (ts->is_incell_panel && (ts->suspend_state == TP_RESUME_EARLY_EVENT) && (ts->tp_resume_order == LCD_TP_RESUME)) {
+            TPD_INFO("tp will resume, no need mode_switch in incell panel\n"); /*avoid i2c error or tp rst pulled down in lcd resume*/
+        } else if (ts->is_suspended) {
+            if (ts->fingerprint_underscreen_support && ts->fp_enable && ts->ts_ops->enable_gesture_mask) {
+                ts->ts_ops->enable_gesture_mask(ts->chip_data, ts->gesture_enable == 1);
+            } else {
+                operate_mode_switch(ts);
+            }
+        }
+    }else {
+        TPD_INFO("%s: do not do same operator :%d\n", __func__, value);
+    }
+    mutex_unlock(&ts->mutex);
+
+    return count;
+}
+
+static ssize_t proc_gesture_control_read(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
+{
+    int ret = 0;
+    char page[PAGESIZE] = {0};
+    struct touchpanel_data *ts = PDE_DATA(file_inode(file));
+
+    if (!ts)
+        return count;
+
+    TPD_DEBUG("double tap enable is: %d\n", ts->gesture_enable);
+    ret = snprintf(page, PAGESIZE-1, "%d\n", ts->gesture_enable);
+    ret = simple_read_from_buffer(user_buf, count, ppos, page, strlen(page));
+
+    return ret;
+}
+
 static ssize_t proc_coordinate_read(struct file *file, char __user *user_buf, size_t count, loff_t *ppos)
 {
     int ret = 0;
@@ -1411,6 +1398,13 @@ static ssize_t proc_coordinate_read(struct file *file, char __user *user_buf, si
     return ret;
 }
 
+static const struct file_operations proc_gesture_control_fops = {
+    .write = proc_gesture_control_write,
+    .read  = proc_gesture_control_read,
+    .open  = simple_open,
+    .owner = THIS_MODULE,
+};
+
 static const struct file_operations proc_coordinate_fops = {
     .read  = proc_coordinate_read,
     .open  = simple_open,
@@ -2357,55 +2351,6 @@ static const struct file_operations proc_incell_panel_fops = {
  * we need to set touchpanel_data struct as private_data to those file_inode
  * Returning zero(success) or negative errno(failed)
  */
-#define GESTURE_ATTR(name, out) \
-	static ssize_t name##_enable_read_func(struct file *file, char __user *user_buf, size_t count, loff_t *ppos) \
-	{ \
-		int ret = 0; \
-		char page[PAGESIZE]; \
-		ret = sprintf(page, "%d\n", out); \
-		ret = simple_read_from_buffer(user_buf, count, ppos, page, strlen(page)); \
-		return ret; \
-	} \
-	static ssize_t name##_enable_write_func(struct file *file, const char __user *user_buf, size_t count, loff_t *ppos) \
-	{ \
-		int ret, enabled = 0; \
-		char page[PAGESIZE] = {0}; \
-		ret = copy_from_user(page, user_buf, count); \
-		ret = sscanf(page, "%d", &enabled); \
-		out = enabled > 0 ? 1 : 0; \
-		return count; \
-	} \
-	static const struct file_operations name##_enable_proc_fops = { \
-		.write = name##_enable_write_func, \
-		.read =  name##_enable_read_func, \
-		.open = simple_open, \
-		.owner = THIS_MODULE, \
-	};
-
-GESTURE_ATTR(double_tap, DouTap_enable);
-GESTURE_ATTR(up_arrow, UpVee_enable);
-GESTURE_ATTR(down_arrow, DownVee_enable);
-GESTURE_ATTR(left_arrow, LeftVee_enable);
-GESTURE_ATTR(right_arrow, RightVee_enable);
-GESTURE_ATTR(double_swipe, DouSwip_enable);
-GESTURE_ATTR(up_swipe, Up2DownSwip_enable);
-GESTURE_ATTR(down_swipe, Down2UpSwip_enable);
-GESTURE_ATTR(left_swipe, Left2RightSwip_enable);
-GESTURE_ATTR(right_swipe, Right2LeftSwip_enable);
-GESTURE_ATTR(letter_o, Circle_enable);
-GESTURE_ATTR(letter_w, Wgestrue_enable);
-GESTURE_ATTR(letter_m, Mgestrue_enable);
-
-#define CREATE_PROC_NODE(PARENT, NAME, MODE) \
-	prEntry_tmp = proc_create(#NAME, MODE, PARENT, &NAME##_proc_fops); \
-	if (prEntry_tmp == NULL) { \
-		ret = -ENOMEM; \
-		TPD_INFO("%s: Couldn't create proc entry, %d\n", __func__, __LINE__); \
-	}
-
-#define CREATE_GESTURE_NODE(NAME) \
-	CREATE_PROC_NODE(prEntry_tp, NAME##_enable, 0666)
-
 static int init_touchpanel_proc(struct touchpanel_data *ts)
 {
     int ret = 0;
@@ -2474,20 +2419,11 @@ static int init_touchpanel_proc(struct touchpanel_data *ts)
 
     //proc files-step2-4:/proc/touchpanel/double_tap_enable (black gesture related interface)
     if (ts->black_gesture_support) {
-        CREATE_GESTURE_NODE(double_tap);
-        CREATE_GESTURE_NODE(up_arrow);
-        CREATE_GESTURE_NODE(down_arrow);
-        CREATE_GESTURE_NODE(left_arrow);
-        CREATE_GESTURE_NODE(right_arrow);
-        CREATE_GESTURE_NODE(double_swipe);
-        CREATE_GESTURE_NODE(up_swipe);
-        CREATE_GESTURE_NODE(down_swipe);
-        CREATE_GESTURE_NODE(left_swipe);
-        CREATE_GESTURE_NODE(right_swipe);
-        CREATE_GESTURE_NODE(letter_o);
-        CREATE_GESTURE_NODE(letter_w);
-        CREATE_GESTURE_NODE(letter_m);
-
+        prEntry_tmp = proc_create_data("double_tap_enable", 0666, prEntry_tp, &proc_gesture_control_fops, ts);
+        if (prEntry_tmp == NULL) {
+            ret = -ENOMEM;
+            TPD_INFO("%s: Couldn't create proc entry, %d\n", __func__, __LINE__);
+        }
         prEntry_tmp = proc_create_data("coordinate", 0444, prEntry_tp, &proc_coordinate_fops, ts);
         if (prEntry_tmp == NULL) {
             ret = -ENOMEM;
@@ -3863,20 +3799,6 @@ static int init_input_device(struct touchpanel_data *ts)
     set_bit(BTN_TOUCH, ts->input_dev->keybit);
     if (ts->black_gesture_support) {
         set_bit(KEY_WAKEUP, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_W, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_M, ts->input_dev->keybit);
-        set_bit(KEY_DOUBLE_TAP, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_CIRCLE, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_TWO_SWIPE, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_UP_ARROW, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_LEFT_ARROW, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_RIGHT_ARROW, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_DOWN_ARROW, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_SWIPE_LEFT, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_SWIPE_DOWN, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_SWIPE_RIGHT, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_SWIPE_UP, ts->input_dev->keybit);
-        set_bit(KEY_GESTURE_SINGLE_TAP, ts->input_dev->keybit);
     }
 
     ts->kpd_input_dev->name = TPD_DEVICE"_kpd";
@@ -4825,7 +4747,7 @@ int register_common_touch_device(struct touchpanel_data *pdata)
     ts->loading_fw = false;
     ts->is_suspended = 0;
     ts->suspend_state = TP_SPEEDUP_RESUME_COMPLETE;
-    ts->gesture_enable = 1;
+    ts->gesture_enable = 0;
     ts->es_enable = 0;
     ts->fd_enable = 0;
     ts->fp_enable = 0;
-- 
2.29.2

